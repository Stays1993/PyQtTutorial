# Form implementation generated from reading ui file '2.10_Calc.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        # 设置窗口的基本属性
        Form.setObjectName("Form")  # 设置窗口对象名称，方便通过名称查找控件
        Form.resize(500, 300)  # 设置窗口大小为500x300像素

        # 创建垂直布局管理器，用于管理窗口内的所有控件
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")  # 设置布局对象名称

        # 第一行：包含标签和第一个输入框
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        # 标签“First Number:”
        self.label = QtWidgets.QLabel(parent=Form)
        font = QtGui.QFont()
        font.setBold(True)  # 设置字体加粗，使文本更显眼
        self.label.setFont(font)
        self.label.setObjectName("label")  # 设置标签对象名称
        self.horizontalLayout.addWidget(self.label)  # 将标签添加到水平布局中

        # 添加一个弹性间隔，使输入框靠右对齐
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem)  # 将间隔项添加到水平布局中

        # 第一个输入框，用于输入第一个数字
        self.lineEdit_first = QtWidgets.QLineEdit(parent=Form)
        font = QtGui.QFont()
        font.setBold(True)  # 设置字体加粗，使输入框内容更显眼
        self.lineEdit_first.setFont(font)
        self.lineEdit_first.setPlaceholderText("")  # 设置占位符文本（可选）
        self.lineEdit_first.setObjectName("lineEdit_first")  # 设置输入框对象名称
        self.horizontalLayout.addWidget(self.lineEdit_first)  # 将输入框添加到水平布局中

        # 将第一行添加到垂直布局中
        self.verticalLayout.addLayout(self.horizontalLayout)

        # 第二行：包含标签和第二个输入框
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        # 标签“Second Number:”
        self.label_2 = QtWidgets.QLabel(parent=Form)
        font = QtGui.QFont()
        font.setBold(True)  # 设置字体加粗，使文本更显眼
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")  # 设置标签对象名称
        self.horizontalLayout_2.addWidget(self.label_2)  # 将标签添加到水平布局中

        # 添加一个弹性间隔，使输入框靠右对齐
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)  # 将间隔项添加到水平布局中

        # 第二个输入框，用于输入第二个数字
        self.lineEdit_second = QtWidgets.QLineEdit(parent=Form)
        font = QtGui.QFont()
        font.setBold(True)  # 设置字体加粗，使输入框内容更显眼
        self.lineEdit_second.setFont(font)
        self.lineEdit_second.setText("")  # 初始化为空字符串
        self.lineEdit_second.setPlaceholderText("")  # 设置占位符文本（可选）
        self.lineEdit_second.setObjectName("lineEdit_second")  # 设置输入框对象名称
        self.horizontalLayout_2.addWidget(self.lineEdit_second)  # 将输入框添加到水平布局中

        # 将第二行添加到垂直布局中
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        # 添加一个垂直间隔，使按钮区与输入区之间有适当间距
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                            QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout.addItem(spacerItem2)  # 将间隔项添加到垂直布局中

        # 第三行：包含四个操作按钮（加、减、乘、除）
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")

        # 加法按钮
        self.pushButton_add = QtWidgets.QPushButton(parent=Form)
        self.pushButton_add.setObjectName("pushButton_add")  # 设置按钮对象名称
        self.pushButton_add.clicked.connect(self.add)  # 绑定点击事件到add方法
        self.horizontalLayout_3.addWidget(self.pushButton_add)  # 将按钮添加到水平布局中

        # 减法按钮
        self.pushButton_minus = QtWidgets.QPushButton(parent=Form)
        self.pushButton_minus.setObjectName("pushButton_minus")  # 设置按钮对象名称
        self.pushButton_minus.clicked.connect(self.minus)  # 绑定点击事件到minus方法
        self.horizontalLayout_3.addWidget(self.pushButton_minus)  # 将按钮添加到水平布局中

        # 乘法按钮
        self.pushButton_multi = QtWidgets.QPushButton(parent=Form)
        self.pushButton_multi.setObjectName("pushButton_multi")  # 设置按钮对象名称
        self.pushButton_multi.clicked.connect(self.multiply)  # 绑定点击事件到multiply方法
        self.horizontalLayout_3.addWidget(self.pushButton_multi)  # 将按钮添加到水平布局中

        # 除法按钮
        self.pushButton_divide = QtWidgets.QPushButton(parent=Form)
        self.pushButton_divide.setObjectName("pushButton_divide")  # 设置按钮对象名称
        self.pushButton_divide.clicked.connect(self.divide)  # 绑定点击事件到divide方法
        self.horizontalLayout_3.addWidget(self.pushButton_divide)  # 将按钮添加到水平布局中

        # 将第三行添加到垂直布局中
        self.verticalLayout.addLayout(self.horizontalLayout_3)

        # 添加一个垂直间隔，使结果标签与按钮区之间有适当间距
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                            QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout.addItem(spacerItem3)  # 将间隔项添加到垂直布局中

        # 结果标签，用于显示计算结果
        self.label_result = QtWidgets.QLabel(parent=Form)
        font = QtGui.QFont()
        font.setPointSize(16)  # 设置字体大小为16点
        font.setBold(True)  # 设置字体加粗，使结果更显眼
        self.label_result.setFont(font)
        self.label_result.setStyleSheet("QLabel {color:green}")  # 设置文本颜色为绿色
        self.label_result.setObjectName("label_result")  # 设置标签对象名称
        self.verticalLayout.addWidget(self.label_result)  # 将标签添加到垂直布局中

        self.retranslateUi(Form)  # 设置界面文本
        QtCore.QMetaObject.connectSlotsByName(Form)  # 连接信号和槽

    def add(self):
        try:
            fnum = int(self.lineEdit_first.text())  # 获取第一个输入框的整数值
            secnum = int(self.lineEdit_second.text())  # 获取第二个输入框的整数值
            result = fnum + secnum  # 执行加法运算
            self.label_result.setText(f"Addition : {result}")  # 显示结果
        except ValueError:
            self.label_result.setText("Invalid input")  # 捕获并处理输入错误

    def minus(self):
        try:
            fnum = int(self.lineEdit_first.text())  # 获取第一个输入框的整数值
            secnum = int(self.lineEdit_second.text())  # 获取第二个输入框的整数值
            result = fnum - secnum  # 执行减法运算
            self.label_result.setText(f"Minus : {result}")  # 显示结果
        except ValueError:
            self.label_result.setText("Invalid input")  # 捕获并处理输入错误

    def multiply(self):
        try:
            fnum = int(self.lineEdit_first.text())  # 获取第一个输入框的整数值
            secnum = int(self.lineEdit_second.text())  # 获取第二个输入框的整数值
            result = fnum * secnum  # 执行乘法运算
            self.label_result.setText(f"Multiply : {result}")  # 显示结果
        except ValueError:
            self.label_result.setText("Invalid input")  # 捕获并处理输入错误

    def divide(self):
        try:
            fnum = int(self.lineEdit_first.text())  # 获取第一个输入框的整数值
            secnum = int(self.lineEdit_second.text())  # 获取第二个输入框的整数值
            if secnum == 0:
                raise ZeroDivisionError("Cannot divide by zero")  # 处理除零错误
            result = fnum / secnum  # 执行除法运算
            self.label_result.setText(f"Divide : {result}")  # 显示结果
        except (ValueError, ZeroDivisionError) as e:
            self.label_result.setText(str(e))  # 捕获并处理输入错误或除零错误

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Calculator"))  # 设置窗口标题
        self.label.setText(_translate("Form", "First Number:"))  # 设置第一个标签文本
        self.label_2.setText(_translate("Form", "Second Number:"))  # 设置第二个标签文本
        self.pushButton_add.setText(_translate("Form", "+"))  # 设置加法按钮文本
        self.pushButton_minus.setText(_translate("Form", "-"))  # 设置减法按钮文本
        self.pushButton_multi.setText(_translate("Form", "*"))  # 设置乘法按钮文本
        self.pushButton_divide.setText(_translate("Form", "/"))  # 设置除法按钮文本
        self.label_result.setText(_translate("Form", ""))  # 初始化结果标签文本为空


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)  # 创建应用程序实例
    Form = QtWidgets.QWidget()  # 创建主窗口部件
    ui = Ui_Form()  # 创建UI类实例
    ui.setupUi(Form)  # 设置UI布局
    Form.show()  # 显示窗口
    sys.exit(app.exec())  # 进入应用程序主循环
